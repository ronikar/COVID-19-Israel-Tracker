{"version":3,"sources":["providers/getIsraelCovid19Data.ts","DailyStatus.tsx","CasesStatistics.tsx","utils/LineChartComponent.tsx","utils/BarChartComponent.tsx","ConfirmedCasesStatistics.tsx","DeathCasesStatistics.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["startDate","moment","toDate","confirmedCasesReports","activeCasesReports","totalDeathsReports","a","reports","index","length","date","getDate","id","format","totalRecovered","closeCases","totalConfirmed","activeCases","totalDeaths","dailyConfirmed","isFirstItem","dailyRecovered","dailyDeaths","push","Promise","resolve","additionalDays","newDate","Date","setDate","CovidDailyStatus","dailyReport","className","DailyStatusCube","title","total","daily","componentClassName","CasesStatistics","ActiveCasesCube","CloseCasesCube","value","ratio","toFixed","closeRatio","totalRatio","LineChartComponent","data","xAxizDataKeys","lineDataKeys","width","height","strokeDasharray","dataKey","map","item","type","stroke","color","strokeWidth","dot","BarChartComponent","barDataKeys","margin","top","right","left","bottom","fill","ConfirmedCasesStatistics","totalLineDataKeys","useMemo","dailyBarDataKeys","activeLineDataKeys","DeathCasesStatistics","Loader","App","useState","setReports","useEffect","getIsraelCovid19Reports","then","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eedcfb27.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport covid19 from \"../react-app-env\";\r\n//import { isNumber } from \"util\";\r\n\r\n// const DATE_FORMAT = \"YYYY-M-D\"\r\n// const ISRAEL_KEY = \"Israel\";\r\n\r\nexport interface DailyReportData {\r\n    date: string;\r\n    confirmed: number;\r\n    deaths: number;\r\n    recovered: number\r\n}\r\n\r\nconst startDate = moment(\"15.02.2020\", \"DD.MM.YYYY\").toDate();\r\n\r\nconst confirmedCasesReports = [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 7, 7, 10, 12, 12, 15, 17, 21, 25, 39, 50, 75, 97, 109, 143, 193, 213, 298, 337, 433, 677, 705, 883, 1071, 1442, 1930, 2369, 2693, 3035]\r\nconst activeCasesReports = [0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 6, 6, 9, 11, 11, 14, 15, 19, 22, 36, 46, 71, 93, 105, 139, 189, 209, 294, 326, 422, 663, 689, 846, 1033, 1400, 1874, 2306, 2617, 2946];\r\nconst totalDeathsReports = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 5, 8, 10];\r\n\r\n//TODO: look for reliable dataset service\r\nexport async function getIsraelCovid19Reports() {\r\n    const reports: covid19.DailyReport[] = [];\r\n\r\n    for (let index = 0; index < confirmedCasesReports.length; index++) {\r\n        const date = getDate(startDate, index);\r\n        const id = moment(date).format(\"DD/MM\");\r\n\r\n        const totalConfirmed = confirmedCasesReports[index];\r\n        const totalDeaths = totalDeathsReports[index];\r\n        const activeCases = activeCasesReports[index];\r\n\r\n        const closeCases = totalConfirmed - activeCases;\r\n        const totalRecovered = closeCases - totalDeaths;\r\n\r\n        const isFirstItem = index === 0;\r\n        const dailyConfirmed = isFirstItem ? totalConfirmed : totalConfirmed - reports[index - 1].totalConfirmed;\r\n        const dailyRecovered = isFirstItem ? totalRecovered : totalRecovered - reports[index - 1].totalRecovered;\r\n        const dailyDeaths = isFirstItem ? totalDeaths : totalDeaths - reports[index - 1].totalDeaths;\r\n\r\n        reports.push({ id, date, totalConfirmed, totalDeaths, totalRecovered, activeCases, closeCases, dailyConfirmed, dailyDeaths, dailyRecovered });\r\n    }\r\n\r\n    return Promise.resolve(reports);\r\n}\r\n\r\nfunction getDate(date: Date, additionalDays: number) {\r\n    const newDate = new Date(date);\r\n    newDate.setDate(newDate.getDate() + additionalDays);\r\n    return newDate;\r\n}\r\n\r\n// export async function getIsraelCovid19Data(): Promise<DailyReport[]> {\r\n//     try {\r\n//         const res = await fetch(\"https://pomber.github.io/covid19/timeseries.json\");\r\n//         const data = await res.json() as Dictionary<DailyReportData[]>;\r\n//         return data[ISRAEL_KEY].map(_convertToDailyData);\r\n//     } catch (e) {\r\n//         console.log(e);\r\n//         return [];\r\n//     }\r\n// }\r\n\r\n// function _convertToDailyData(data: DailyReportData, index: number, array: DailyReportData[]) {\r\n//     const { recovered, deaths: totalDeaths, confirmed: totalConfirmed, date } = data;\r\n//     const totalRecovered = isNumber(recovered) ? recovered : array[index - 1]?.recovered; // recoverd can be null when the number of recovered doen't exist\r\n//     const closeCases = totalRecovered + totalDeaths;\r\n//     const activeCases = totalConfirmed - closeCases;\r\n\r\n//     const isFirstItem = index === 0;\r\n//     const dailyConfirmed = isFirstItem ? totalConfirmed : totalConfirmed - array[index - 1].confirmed;\r\n//     const dailyRecovered = isFirstItem ? totalRecovered : totalRecovered - array[index - 1].recovered;\r\n//     const dailyDeaths = isFirstItem ? totalDeaths : totalDeaths - array[index - 1].deaths;\r\n\r\n//     return {\r\n//         date: moment(date, DATE_FORMAT).toDate(),\r\n//         totalConfirmed,\r\n//         totalRecovered,\r\n//         totalDeaths,\r\n//         dailyConfirmed,\r\n//         dailyRecovered,\r\n//         dailyDeaths,\r\n//         closeCases,\r\n//         activeCases\r\n//     };\r\n// }","import \"./DailyStatus.css\";\r\n\r\nimport React from 'react';\r\nimport covid19 from \"./react-app-env\";\r\n\r\ninterface Props {\r\n  dailyReport: covid19.DailyReport\r\n}\r\n\r\nexport function CovidDailyStatus({ dailyReport }: Props) {\r\n  const { totalConfirmed, totalDeaths, totalRecovered, dailyConfirmed, dailyDeaths, dailyRecovered } = dailyReport;\r\n\r\n  return < section className=\"daily-status\" >\r\n    <DailyStatusCube title={\"מספר חולים מאומתים\"} className=\"confirmed\" total={totalConfirmed} daily={dailyConfirmed} />\r\n    <DailyStatusCube title={\"מספר המתים\"} className=\"deaths\" total={totalDeaths} daily={dailyDeaths} />\r\n    <DailyStatusCube title={\"מספר חולים שהבריאו\"} className=\"recovered\" total={totalRecovered} daily={dailyRecovered} />\r\n  </section>;\r\n}\r\n\r\ninterface DailyStatusCubeProps {\r\n  title: string;\r\n  className: string;\r\n  total: number;\r\n  daily: number;\r\n}\r\n\r\nfunction DailyStatusCube({ title, className, total, daily }: DailyStatusCubeProps) {\r\n  const componentClassName = `cube ${className}`;\r\n\r\n  return <div className={componentClassName}>\r\n    <h3>{title} </h3>\r\n    <div className=\"total-number\"> {total} </div>\r\n    <div className=\"daily-number\"> {daily} ביממה האחרונה </div>\r\n  </div>;\r\n}","import \"./CasesStatistics.css\";\r\n\r\nimport React from \"react\";\r\nimport covid19 from \"./react-app-env\";\r\n\r\ninterface Props {\r\n    dailyReport: covid19.DailyReport\r\n}\r\n\r\nexport function CasesStatistics({ dailyReport }: Props) {\r\n    const { totalDeaths, totalRecovered } = dailyReport;\r\n    return <section className=\"active-close-statistics\">\r\n        <h2>מקרים פתוחים וסגורים בארץ</h2>\r\n        <div className=\"cases-panel\">\r\n            <ActiveCasesCube {...dailyReport} />\r\n            <CloseCasesCube title=\"מספר החולים שנפטרו\" value={totalDeaths} {...dailyReport} />\r\n            <CloseCasesCube title=\"מספר החולים שהחלימו\" value={totalRecovered} {...dailyReport} />\r\n        </div>\r\n    </section>;\r\n}\r\n\r\ninterface ActiveCasesCubeProps {\r\n    activeCases: number;\r\n    totalConfirmed: number;\r\n}\r\n\r\nfunction ActiveCasesCube({ activeCases, totalConfirmed }: ActiveCasesCubeProps) {\r\n\r\n    const ratio = activeCases / totalConfirmed * 100;\r\n    return <div className=\"active-cases-cube\">\r\n        <h3>מספר חולים פעילים</h3>\r\n        <div className=\"value\">{activeCases}</div>\r\n        <div className=\"ratio\"><span>{ratio.toFixed(1)}</span>מבין כלל המקרים </div>\r\n    </div>;\r\n}\r\n\r\ninterface CloseCasesCubeProps {\r\n    title: string;\r\n    value: number;\r\n    closeCases: number;\r\n    totalConfirmed: number;\r\n}\r\n\r\nfunction CloseCasesCube({ title, value, closeCases, totalConfirmed }: CloseCasesCubeProps) {\r\n    const closeRatio = value / closeCases * 100;\r\n    const totalRatio = value / totalConfirmed * 100;\r\n\r\n    return <div className=\"close-cases-cube\">\r\n        <h3>{title}</h3>\r\n        <div className=\"value\">{value}</div>\r\n        <div className=\"ratio\"><span>{closeRatio.toFixed(1)}</span> מבין המקרים הסגורים</div>\r\n        <div className=\"ratio\"><span>{totalRatio.toFixed(1)}</span> מבין כלל הנדבקים</div>\r\n    </div>\r\n}\r\n","\r\nimport \"./LineChartComponent.css\";\r\n\r\nimport React from \"react\";\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from \"recharts\";\r\n\r\ninterface DataKeyItem {\r\n    id: string;\r\n    color: string;\r\n}\r\n\r\ninterface ChartProps {\r\n    title: string;\r\n    data: any;\r\n    lineDataKeys: DataKeyItem[];\r\n    xAxizDataKeys?: string;\r\n}\r\n\r\nexport function LineChartComponent({ title, data, xAxizDataKeys = \"id\", lineDataKeys }: ChartProps) {\r\n    return <div className=\"line-chart\">\r\n        <h3>{title}</h3>\r\n        <LineChart\r\n            width={500}\r\n            height={300}\r\n            data={data}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey={xAxizDataKeys} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            {lineDataKeys.map(item => <Line type=\"monotone\" dataKey={item.id} stroke={item.color} strokeWidth={3} dot={false} />)}\r\n        </LineChart>\r\n    </div>;\r\n}","\r\nimport \"./BarChartComponent.css\";\r\n\r\nimport React from \"react\";\r\nimport { XAxis, YAxis, Tooltip, Legend, CartesianGrid, BarChart, Bar } from \"recharts\";\r\n\r\ninterface DataKeyItem {\r\n    id: string;\r\n    color: string;\r\n}\r\n\r\ninterface ChartProps {\r\n    title: string;\r\n    data: any;\r\n    barDataKeys: DataKeyItem[];\r\n    xAxizDataKeys?: string;\r\n}\r\n\r\nexport function BarChartComponent({ title, data, xAxizDataKeys = \"id\", barDataKeys }: ChartProps) {\r\n    return <div className=\"bar-chart\">\r\n        <h3>{title}</h3>\r\n        <BarChart\r\n            width={500}\r\n            height={300}\r\n            data={data}\r\n            margin={{\r\n                top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey={xAxizDataKeys} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            {barDataKeys.map(item => <Bar dataKey={item.id} fill={item.color} />)}\r\n        </BarChart>\r\n    </div>;\r\n}","import \"./ConfirmedCasesStatistics.css\";\r\n\r\nimport React, { useMemo } from \"react\";\r\nimport covid19 from \"./react-app-env\";\r\n\r\nimport { LineChartComponent } from \"./utils/LineChartComponent\";\r\nimport { BarChartComponent } from \"./utils/BarChartComponent\";\r\n\r\ninterface Props {\r\n    reports: covid19.DailyReport[]\r\n}\r\n\r\nexport function ConfirmedCasesStatistics({ reports }: Props) {\r\n    const totalLineDataKeys = useMemo(() => [{ id: \"totalConfirmed\", color: \"#8884d8\" }], []);\r\n    const dailyBarDataKeys = useMemo(() => [{ id: \"dailyConfirmed\", color: \"#8884d8\" }], []);\r\n    const activeLineDataKeys = useMemo(() => [{ id: \"activeCases\", color: \"#8884d8\" }], []);\r\n\r\n    return <section className=\"confirmed-cases-panel\">\r\n        <h2>סטטיסטיקות מתקדמות על מספר הנדבקים</h2>\r\n        <div className=\"charts\">\r\n            <LineChartComponent title=\"מספר נדבקים כולל\" data={reports} lineDataKeys={totalLineDataKeys} />\r\n            <BarChartComponent title=\"מספר נדבקים יומי\" data={reports} barDataKeys={dailyBarDataKeys} />\r\n            <LineChartComponent title=\"מספר חולים פעילים\" data={reports} lineDataKeys={activeLineDataKeys} />\r\n        </div>\r\n    </section>\r\n}","import \"./DeathCasesStatistics.css\";\r\n\r\nimport React, { useMemo } from \"react\";\r\nimport covid19 from \"./react-app-env\";\r\n\r\nimport { LineChartComponent } from \"./utils/LineChartComponent\";\r\nimport { BarChartComponent } from \"./utils/BarChartComponent\";\r\n\r\ninterface Props {\r\n    reports: covid19.DailyReport[]\r\n}\r\n\r\nexport function DeathCasesStatistics({ reports }: Props) {\r\n    const totalLineDataKeys = useMemo(() => [{ id: \"totalDeaths\", color: \"#ba2525\" }], []);\r\n    const dailyBarDataKeys = useMemo(() => [{ id: \"dailyDeaths\", color: \"#ba2525\" }], []);\r\n\r\n    return <section className=\"death-cases-panel\">\r\n        <h2>סטטיסטיקות מתקדמות על מספר המתים</h2>\r\n        <div className=\"charts\">\r\n            <LineChartComponent title=\"מספר נפטרים כולל\" data={reports} lineDataKeys={totalLineDataKeys} />\r\n            <BarChartComponent title=\"מספר נפטרים יומי\" data={reports} barDataKeys={dailyBarDataKeys} />\r\n        </div>\r\n    </section>\r\n}","import './App.css';\r\nimport './Loader.css';\r\n\r\nimport React, { useState, useEffect, Fragment } from 'react';\r\nimport moment from \"moment\";\r\n\r\nimport { getIsraelCovid19Reports } from './providers/getIsraelCovid19Data';\r\nimport { CovidDailyStatus } from './DailyStatus';\r\nimport { CasesStatistics } from './CasesStatistics';\r\nimport covid19 from './react-app-env';\r\nimport { ConfirmedCasesStatistics } from './ConfirmedCasesStatistics';\r\nimport { DeathCasesStatistics } from './DeathCasesStatistics';\r\n\r\nfunction App() {\r\n  const [reports, setReports] = useState([] as covid19.DailyReport[]);\r\n  const dailyReport = reports[reports.length - 1];\r\n  \r\n  useEffect(() => { getIsraelCovid19Reports().then(data => setReports(data)) }, []);\r\n\r\n  return <div className=\"covid-19-app\">\r\n    <header className=\"app-header\">\r\n      <h1>מגפת הקורונה בישראל</h1>\r\n      {dailyReport && <div className=\"last-update\">נכון לתאריך {moment(dailyReport.date).format(\"DD.MM.YYYY\")}</div>}\r\n    </header>\r\n    {reports.length === 0 ? <Loader /> :\r\n      <Fragment>\r\n        <CovidDailyStatus dailyReport={dailyReport} />\r\n        <CasesStatistics dailyReport={dailyReport}/>\r\n        <ConfirmedCasesStatistics reports={reports}/>\r\n        <DeathCasesStatistics reports={reports}/>\r\n      </Fragment>}\r\n    <footer>\r\n          <p>נוצר ע\"י רוני קרילקאר</p>\r\n          <div>המידע מוזן כרגע באופן ידני ולכן עדכניות המידע תלויה בעיקר בי :)</div>\r\n        </footer>\r\n  </div>;\r\n}\r\n\r\nfunction Loader() {\r\n  return <div className=\"loader-wrapper\"><div className=\"loader\"></div></div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}