{"version":3,"sources":["getIsraelCovid19Data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["a","fetch","res","json","data","map","_convertToDailyData","recovered","deaths","confirmed","date","closeCases","activeCases","moment","toDate","Loader","className","App","useState","covidData","setCovidData","console","log","useEffect","getIsraelCovid19Data","then","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0VAyBO,gCAAAA,EAAA,sEACeC,MAAM,oDADrB,cACGC,EADH,gBAEgBA,EAAIC,OAFpB,cAEGC,EAFH,mCAIIA,EAAI,cAJR,aAII,EAAkBC,IAAIC,IAJ1B,4C,sBAOP,SAASA,EAAoBF,GAAwB,IACzCG,EAAuCH,EAAvCG,UAAWC,EAA4BJ,EAA5BI,OAAQC,EAAoBL,EAApBK,UAAWC,EAASN,EAATM,KAChCC,EAAaJ,EAAYC,EACzBI,EAAcH,EAAYF,EAEhC,OAAO,eACAH,EADP,CAEIM,KAAMG,IAAOH,EArCD,YAqCoBI,SAChCH,aACAC,gBCdR,SAASG,IACP,OAAO,yBAAKC,UAAU,kBAAiB,yBAAKA,UAAU,YAIzCC,MA3Bf,WAAgB,IAAD,EACqBC,qBADrB,mBACNC,EADM,KACKC,EADL,KAMb,OAJAC,QAAQC,IAAIH,GAEZI,qBAAU,YDgBL,WAAP,gCChBoBC,GAAuBC,MAAK,SAAArB,GAAI,OAAIgB,EAAahB,QAAU,IAEtE,yBAAKY,UAAU,gBACpB,4BAAQA,UAAU,cAChB,uHAEF,6BAASA,UAAU,gBACjB,8ZACA,+gBAEAG,EAAuB,KAAZ,kBAAC,EAAD,MACb,gCACE,yIACA,6BAAK,wRAA0E,uBAAGO,KAAK,qCAAR,6CCVjEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDqI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.5ad63953.chunk.js","sourcesContent":["import moment from \"moment\";\r\n\r\nconst DATE_FORMAT = \"YYYY-M-D\"\r\nconst ISRAEL_KEY = \"Israel\";\r\n\r\ninterface Dictionary<T> {\r\n    [key: string]: T\r\n}\r\n\r\ninterface DailyDataResult {\r\n    date: string;\r\n    confirmed: number;\r\n    deaths: number;\r\n    recovered: number\r\n}\r\n\r\ninterface DailyData {\r\n    date: Date;\r\n    confirmed: number;\r\n    deaths: number;\r\n    recovered: number;\r\n    activeCases: number;\r\n    closeCases: number;\r\n}\r\n\r\nexport async function getIsraelCovid19Data(): Promise<DailyData[]> {\r\n    const res = await fetch(\"https://pomber.github.io/covid19/timeseries.json\");\r\n    const data = await res.json() as Dictionary<DailyDataResult[]>;\r\n\r\n    return data[ISRAEL_KEY]?.map(_convertToDailyData);\r\n}\r\n\r\nfunction _convertToDailyData(data: DailyDataResult) {\r\n    const { recovered, deaths, confirmed, date } = data;\r\n    const closeCases = recovered + deaths;\r\n    const activeCases = confirmed - recovered;\r\n    \r\n    return {\r\n        ...data,\r\n        date: moment(date, DATE_FORMAT).toDate(),\r\n        closeCases,\r\n        activeCases\r\n    };\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Loader.css';\nimport { getIsraelCovid19Data } from './getIsraelCovid19Data';\n\nfunction App() {\n  const [covidData, setCovidData] = useState();\n  console.log(covidData);\n\n  useEffect(() => { getIsraelCovid19Data().then(data => setCovidData(data)) }, []);\n\n  return <div className=\"covid-19-app\">\n    <header className=\"app-header\">\n      <h1>מפת קורונה ישראל</h1>\n    </header>\n    <section className=\"introduction\">\n      <p>האתר משתמש במאגרי מידע מהעולם ומציג סטטיסיקות שונות על מצב הקורונה בישראל</p>\n      <p>שימו לב: האתר משתמש בסטטיסטיקות מהעולם, ולכן המידע שמוצג אינו תמיד עדכני. המידע מתעדכן 3 פעמים ביום </p>\n    </section>\n    {!covidData? <Loader/> : null}\n    <footer>\n      <p>נוצר ע\"י רוני קרילקאר</p>\n      <div><span>האתר משתמש במידע שמונגש ע\"י Rodrigo Pombo. למעבר למאגר המידע </span><a href=\"https://github.com/pomber/covid19\">לחץ כאן</a></div>\n    </footer>\n  </div>;\n}\n\nfunction Loader() {\n  return <div className=\"loader-wrapper\"><div className=\"loader\"></div></div>\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}